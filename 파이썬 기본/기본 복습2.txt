1번 자료구조 변경
# 자료구조의 변경
# 커피숍

menu = {"커피", "우유", "주스"}
print(menu, type(menu))

menu = list(menu)
print(menu, type(menu))

menu = tuple(menu)
print(menu, type(menu))

menu = set(menu)
print(menu, type(menu))

2번 추천 프로그램 작성 

# 추천 프로그램 작성
from random import *

lst = range(1, 21) # 1부터 20까지 숫자를 생성
# print(type(lst))
lst = list(lst)
# print(type(lst))

print(lst)
shuffle(lst)
print(lst)

winners = sample(lst, 4) # 4명 중에서 1명은 치킨 3명은 커피 
print(" -- 당첨자 발표 -- ")
print("치킨 당첨자 : {0}".format(winners[0]))
print("커피 당첨자 : {0}".format(winners[1:]))
print(" -- 축하합니다 -- ")

3번 분기
# 분기
weather = input("오늘 날씨는 어때요 ? ")

if weather == "비" or weather == "눈":
    print("우산을 챙기세요")
elif weather == "미세먼지":
    print("마스크를 챙기세요")
else:
    print("준비물 필요 없어요.")

temp = int(input("기온은 어때요 ? "))

if 30 <= temp:
    print("너무 더워요. 나가지 마세요")
elif 10 <= temp and temp < 30:
    print("괜찮은 날씨에요")
elif 0 <= temp and temp < 10:
    print("외투를 챙기세요")
else:
    print("너무 추워요. 나가지 마세요")

4번 반복문

# 반복문 
# for
for waiting_no in range(1, 6): # 1, 2, 3, 4, 5
     # [] 의 숫자가 차례대로 waiting_no에 한 번식 들어 가서 출력한다
    print("대기번호 : {0}".format(waiting_no))


starbucks = ["아이언맨", "토르", "아이엠 그루트"]
for customer in starbucks:
    print("{0}, 커피가 준비되었습니다.".format(customer))

# # while
customer = "토르"
index = 5
while (index >= 1):
    print("{0}, 커피가 준비 되었습니다. {1}번 남았어요".format(customer, index))
    index -= 1
    if index == 0:
        print("커피는 폐기처분 되었습니다")

# 무한루르
customer = "아이언맨"
index = 1
while True:
    print("{0}, 커피가 준비 되었습니다. 호출{1}회".format(customer, index))
    index += 1

customer = "토르"
person = "Unknown"

while person != customer :
    print("{0}, 커피가 준비 되었습니다.".format(customer))
    person = input("이름이 어떻게 되세요? ")

5번 continue 와 break
# continue 와 break

absent = [2, 5] # 결석
no_book = [7] # 책을 깜박햇음
for student in range(1, 11): # 1 ~ 10 까지번호를 가진 학생들이 있다 
    if student in absent: # 정의 된 absent의 숫자가 student로 들어간다면 continue를 실행
        # 반복을 계속 진행하라는 말이다.
        continue
    elif student in no_book:
        print("오늘 수업은 여기끼지, {0}는 교무실로 따라와".format(student))
        break
        # 위의 것은 반복문을 종료하고 끝내기 
    print('{0}, 책을 읽어봐'.format(student))

6번 한줄 for
# 출석 번호가 1 2 3 4, 앞에 100을 붙이기로 함 -> 101, 102, 103, 104
students = [1,2,3,4,5]
print(students)
students = [i+100 for i in students]
# students에 있는 수들은 하나씩 불러와서 +100을 더하자 
print(students)

# 학생 이름을 길이로 변환
students = ["Iron man", "Thor", "I am groot"]
students = [len(i) for i in students]
#len는 문자열이나 값의 길이를 의미한다
print(students)

# 학생 이름을 대문자로 전환 
students = ["Iron man", "Thor", "I am groot"]
students = [i.upper() for i in students]
print(students)

6번 탑승 승객 수 구하기 
from random import *
cnt = 0 # 총 탑승 승객 수
for i in range(1, 51): # 1 ~ 50 이라는 수 승객

    time = randrange(5, 51) # 5분 에서 50분 소요시간

    if 5 <= time <=15: # 5 ~ 15이내의 손님, 탑승 승객 수 증가 처리 - 매칭 성공
        print("[O] {0}번째 손님 (소요시간 : {1}분)".format(i, time))
        cnt += 1
    else: # 매칭 실패한 경우
        print("[ ] {0}번째 손님 (소요시간 : {1}분)".format(i, time))

print("총 탑승 승객: {0}명".format(cnt))

7번 함수
# 함수
def open_account(): # 실행하려면 실행 시켜주어야한다 
    print("새로운 계좌가 생성되었습니다.")

def deposit(balance, money): # 입금
    print("입금이 완료되었습니다. 잔액은 {0}원 입니다.".format(balance + money))
    return balance + money

def withdraw(balance, money): # 출금
    if balance >= money: #잔액이 출금보다 많으면 
        print("출금이 완료되었습니다. 잔액은 {0} 원입니다.".format(balance-money))
        return balance - money
    else:
        print("출금이 완료되지 않았습니다. 잔액은 {0} 원입니다.".format(balance))
        return balance


def withdraw_night(balance, money): #저녁에 출금
    commission = 100 # 수수료 100원
    return commission, balance - money - commission

balance = 0 #잔액
balance = deposit(balance, 1000)
# balance = withdraw(balance, 2000)
# balance = withdraw(balance, 500)
commission, balance = withdraw_night(balance, 500)
print("수수료 {0} 원이며, 잔액은 {1}원입니다.".format(commission, balance))

8번 기본 함수
# 기본
def profile(name, age, main_lang):
    print("이름 : {0}\t나이 : {1}\t주 사용 언어: {2}"\
        .format(name, age, main_lang))

profile("유재석", 20, "파이썬")
profile("김태호", 25, "자바")

# 같은 학교 같은 학년 같은 반 같은 수업

def profile(name, age=17, main_lang="파이썬"):
    print("이름 : {0}\t나이 : {1}\t주 사용 언어: {2}"\
        .format(name, age, main_lang))

profile("유재석")
profile("김태호")

def profile(name, age, main_lang):
    print(name, age, main_lang)

profile(name="유재석", main_lang="파이썬", age=20)
profile(main_lang="자바", age=25, name="김태호")

9번 가변인자를 이용 함수 호출
# # 가변인자 이용 함수 호출 
def profile(name, age, lang1, lang2, lang3, lang4, lang5):
    print("이름 : {0}\t나이 : {1}\t".format(name, age), end=" ")
    print(lang1, lang2, lang3, lang4, lang5)

def profile(name, age, *language):
    print("이름 : {0}\t나이 : {1}\t".format(name, age), end=" ")
    for lang in language:
        print(lang, end=" ")
    print()

profile("유재석", 20, "Python", "Java", "C", "C++", "C#", "JavaScript")
profile("김태호", 25, "kotlin", "Swift", "", "", "")

10함수 
gun = 10

def checkpoint(soldiers): # 경계근무
    global gun # 전역 공간에 있는 gun 사용 
    gun = gun - soldiers
    print("[함수 내] 남은 총 : {0}".format(gun))

def checkpoint_ret(gun, soldiers):
    gun = gun - soldiers
    print("[함수 내] 남은 총 : {0}".format(gun))
    return gun

print("전체 총 : {0}".format(gun))
# checkpoint(2)
gun = checkpoint_ret(gun, 2)
print("남은 총 : {0}".format(gun))