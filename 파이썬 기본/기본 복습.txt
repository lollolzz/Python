1번 숫자 처리 함수 

print(abs(-5)) # 절대값 출력 
print(pow(4, 2)) # 4 ^ 2 = 4 * 4 = 16 거듭 제곱
print(round(3.14)) # 반올림 

From math import * - > math에 있는 함수를 모두 사용해라 
print(floor(4.99)) # 내림
print(ceil(3.14)) # 올림
print(sqrt(16)) # 4의 제곱근은 16 

2번 랜덤 수 생성
from random import *

print(randint(1, 45)) # 1 ~ 45 이하의 값을 생성 

=> 여러가지가 있지만 randint가 제일 편해 보인다 

from random import *

date = randint(4, 28)
print('오프라인 스터디 모임 날짜는 매월 ' + str(date) +'일로 선정되었습니다.')

3번 슬라이싱 
# 필요한 정보만 잘라서 쓰기 
jumin = "990120 - 1234567"
print("성별 :" + jumin[9])
print("연 :" +jumin[0:2]) # 0 ~ 2 직전까지 (0, 1)
print("월 :" + jumin[2:4])
print("일 :" + jumin[4:6])
print("생년월일 :" + jumin[:6]) # 처음 부터 6 직전 까지 값가져오기 
print("뒤 7자리 :" + jumin[9:]) # 7 부터 끝까지 

print("뒤 7자리 (뒤에서부터) :" + jumin[-7:])
# 맨 뒤에서 7번째부터 끝까지

4번 문자 
python = "Python is Amazing"
print(python.lower())
print(python.upper())
print(python[0].islower()) # 인덱스 0번째가 소문자인지 확인 
print(len(python)) # python의 문자열 길이를 확인

print(python.replace("Python", "Java")) # 문자를 찾아서 원하는 문자로 바꿔주기 

index = python.index("n") # python 변수에서 첫번째 "n"의 위치를 찾는 것 
print(index)
index = python.index("n", index + 1) # 두번째 "n"의 위치를 찾는 것
print(index)

print(python.find("Java")) # 원하는 값이 변수에 없을경우 -1 반환
# print(python.index("Java")) # index를 사용하는데 원하는 값이 없을 경우 오류를 내면서 프로그램 종료
print('hi')

print(python.count("n"))

5번 문자열 
# 방법 1
print("나는 %d살입니다." % 20) # d는 정수를 의미한다
print("나는 %s를 좋아해요." % "파이썬") # s는 문자열을 의미한다 
print("Apple 은 %c로 시작해요." % "A") # c는 한 문자만 받을레요 아마 charAt인듯

# %s -> 정수든 문자든 다 받을 수 있다.
print("나는 %s살입니다." % 20)

print("나는 %s색과 %s색을 좋아해요." % ("파란", "빨간"))

# 방법 2
print("나는 {}살입니다.".format(20))
print("나는 {}색과 {}색을 좋아해요.".format("파란", "빨간"))
print("나는 {0}색과 {1}색을 좋아해요.".format("파란", "빨간"))
print("나는 {1}색과 {0}색을 좋아해요.".format("파란", "빨간"))

# 방법 3
print("나는 {color}살이며, {age}색을 좋아해요". format(age = 20, color = "빨간"))
print("나는 {age}살이며, {color}색을 좋아해요". format(color = "빨간", age = 20))

# 방법 4
age = 20
color = "빨간색"
print(f"나는 {age}살이며, {color}색을 좋아해요.")

6번 문장 탈출 
# \n : 줄바꿈
# print("백문이 불여일견 \n 백견이 불여일타")

# \" \' : 문장 내에서 따옴표로 사용 가능 
# 저는 "나도코딩 입니다".
# print("저는 '나도코딩' 입니다.")
# print('저는 "나도코딩" 입니다.')
# print("저는 \"나도 코딩\" 입니다.")
# print("저는 \'나도 코딩\' 입니다.")

# \\ : 문장 내에서 \
# print("\\Users\\kwonneunghan\\Desktop\\js")

# \r :커서를 맨 앞으로 이동 
print("Red Apple\rPine") # 맨 앞 red를 잡아 먹음 

# \b : 백스페이스 (한 글자 삭제)
# print("Redd\bApple")

# \t : 탭
print("Red\tApp")

7번 리스트
# 지철 칸별로 10명 20명 30명 

subway = [10, 20, 30]
print(subway)
subway = ["유재석", "조세호", "박명수"]
print(subway)

# 조세호씨가 몇 번 째 칸에 타고 있는가 ?>
print(subway.index("조세호"))

# 하하씨가 다음 정류장에서 다음 칸에 탐 
subway.append("하하")
print(subway)

# 정형돈씨를 유재석 / 조세호 사이에 태워봄
subway.insert(1, "정형돈") # 인덱스 자리, 넣을 이름 명 
print(subway)

# 지하철에 있는 사람을 한 명씩 뒤에서 꺼냄
print(subway.pop())
print(subway)
print(subway.pop())
print(subway)
print(subway.pop())
print(subway)

# 같은 이름의 사람이 몇 명 있는지 확인 
subway.append("유재석")
print(subway)
print(subway.count("유재석"))

# 정렬도 가능 
num_list = [5,2,4,3,1]
num_list.sort()
print(num_list)

# 순서 뒤집기 가능 
num_list.reverse()
print(num_list)

# 모두 지우기
num_list.clear()
print(num_list)

# 다양한 자료형 함께 사용
num_list = [5,2,4,3,1]
mix_list = ["조세호", 20, True]
# print(mix_list)

# 리스트 확장
num_list.extend(mix_list)
print(num_list)

8번 사전

cabinet = {3:"유재석", 100:"김태호"} 
# key, value의 형태로 데이터가 들어감 
print(cabinet[3])
print(cabinet[100])

print(cabinet.get(3))
print(cabinet[5]) 
# []사용할 경우 할당 되지 않은 key를 출력 하려고 한다면 오류가 발생한다 그 다음 것도 출력 안함
print(cabinet.get(5))
# .get()사용할 경우 none이 나오고 밑에는 출력 가능 
print(cabinet.get(5, "사용 가능"))
print('hi')

print(3 in cabinet) # True
print(5 in cabinet) # False

cabinet = {"A-3" : "유재석", "B-100" : "김태호"}
print(cabinet["A-3"])
print(cabinet["B-100"])

# 새 손님
print(cabinet)
cabinet["A-3"] = "김종국"
cabinet["C-20"] = "조세호"
print(cabinet)

# 간 손님 - 삭제
del cabinet["A-3"]
print(cabinet)

# key들만 출력 
print(cabinet.keys())

# value 들만 출력
print(cabinet.values())

# key, value 쌍으로 출력
print(cabinet.items())

# 목용탕 폐점 
cabinet.clear()
print(cabinet)

9번 튜플
# 튜플
# list와 다르게 내용변경 추가 불가 / 속도가 list보다 빠르다 / 변경되지 않는 것을 사용할 때 사용

# menu = ("돈까스", "치즈까스")
# print(menu[0])
# print(menu[1])

# menu.add("생선까스")
# 튜플 추가 불가 

# name = "김종국"
# age = 20
# hobby = "코딩"
# print(name, age, hobby)

name, age, hobby = ("김종국", 20, "코딩")
print(name, age, hobby)

10번 집합

# 집합(set)
# 중복이 안되고, 순서 없음

my_set = {1,2,3,3,3}
print(my_set)

java = {"유재석", "김태호", "양세형"}
python = set(["유재석", "박명수"])

# 교집합 (java와 python을 모두 할 수 있는 개발자)
print(java & python)
print(java.intersection(python))

# 합집합 (java도 할 수 있거나 python도 할 수 있는 개발자)
print(java | python)
print(java.union(python)) # 집한은 순서가 없어 순서는 막 나온다 

# 차집합 (java 할 수 있지만 python할줄 모르는 개발자)
print(java - python)
print(java.difference(python))

# python 할 줄 아는 사람이 늘어남
python.add("김태호")
print(python)

# java를 까먹음 
java.remove("김태호")
print(java)