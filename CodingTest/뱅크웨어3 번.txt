자바
import java.io.*;
import java.util.StringTokenizer;

public class Main {
    public static int N, M;
    public static int[][] map;
    public static int cnt = 0;
    public static int[] dr = {-1, 0, 1, 0}; // 북,동,남,서
    public static int[] dc = {0, 1, 0, -1};

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st = new StringTokenizer(br.readLine());

        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());
        map = new int[N][M];

        st = new StringTokenizer(br.readLine());
        int r = Integer.parseInt(st.nextToken());
        int c = Integer.parseInt(st.nextToken());
        int d = Integer.parseInt(st.nextToken());

        for (int i = 0; i < N; i++) {
            st = new StringTokenizer(br.readLine());
            for (int j = 0; j < M; j++) {
                map[i][j] = Integer.parseInt(st.nextToken());
            }
        }
        clean(r, c, d);

        bw.write(cnt + "\n");
        br.close();
        bw.flush();
        bw.close();
    }

    public static void clean(int row, int col, int direction) {
        // 1. 현재 위치를 청소한다.
        if (map[row][col] == 0) {
            map[row][col] = 2;
            cnt++;
        }

        // 2. 왼쪽방향부터 차례대로 탐색을 진행한다.
        boolean flag = false; // 무한 루프 빠져나가기 
        int origin = direction;
        for (int i = 0; i < 4; i++) {
            int next_d = (direction + 3) % 4;
            int next_r = row + dr[next_d];
            int next_c = col + dc[next_d];

            if (next_r > 0 && next_c > 0 && next_r < N && next_c < M) {
                if (map[next_r][next_c] == 0) {   // 아직 청소하지 않은 공간이라면
                    clean(next_r, next_c, next_d);
                    flag = true;
                    break;
                }
            }
            direction = (direction + 3) % 4;
        }

        // 네 방향 모두 청소가 되어있거나 벽인 경우
        if (!flag) {
            int next_d = (origin + 2) % 4;
            int next_br = row + dr[next_d];
            int next_bc = col + dc[next_d];

            if (next_br > 0 && next_bc > 0 && next_br < N && next_bc < M) {
                if (map[next_br][next_bc] != 1) {
                    clean(next_br, next_bc, origin); // 바라보는 방향 유지한 채 후진
                }
            }
        }
    }
}

파이썬

def solution(office, r, c,move):
    direction = 0
    dx = [-1, 1, 0, 0]  #
    dy = [0,  0,-1, 1]  # 상하좌우를 담아줌
    sum_1 = 0
    sum_1 += office[r][c]
    office[r][c] = 0
    x = c
    y = r  # x,y  좌표 담아줌
    n = len(office)  # 전체 지도 크기  y =  높     이가  6
    m = len(office[0])  # x = 너비 10
    for i in range(len(move)):
        print(direction,"direction",x,y)
        if move[i] == "left":
            direction = (direction+3)%4
        elif move[i] == "right":
            direction = (direction+1)%4
        elif move[i] == "go":
            if direction == 0:
                nx = x + dx[2]  # 0일 때 왼쪽으로, 1일 때 오른쪽, 2일 때 아래로 한 칸, 3일 때 위로 한 칸
                ny = y + dy[2]
                if nx >= n or ny >= m or nx < 0 or ny < 0:  # 좌표 범위를 넘어가면 무시때림
                    continue
                if office[ny][nx] == -1:  # -1로 갈 때 막힘
                    continue
                else:  # 장애물이 있을 경우
                    sum_1+=office[ny][nx]
                    office[ny][nx] = 0
                    x = nx
                    y = ny
            elif direction == 1:
                nx = x + dx[1]  # 0일 때 왼쪽으로, 1일 때 오른쪽, 2일 때 아래로 한 칸, 3일 때 위로 한 칸
                ny = y + dy[1]

                if nx >= n or ny >= m or nx < 0 or ny < 0:  # 좌표 범위를 넘어가면 무시때림
                    continue
                if office[ny][nx] == -1:  # -1로 갈 때 막힘
                    continue
                else:
                    sum_1 += office[ny][nx]
                    office[ny][nx] = 0
                    x = nx
                    y = ny
            elif direction == 2:
                nx = x + dx[3]  # 0일 때 왼쪽으로, 1일 때 오른쪽, 2일 때 아래로 한 칸, 3일 때 위로 한 칸
                ny = y + dy[3]
                if nx >= n or ny >= m or nx < 0 or ny < 0:  # 좌표 범위를 넘어가면 무시때림
                    continue
                if office[ny][nx] == -1:  # -1로 갈 때 막힘
                    continue
                else:
                    sum_1 += office[ny][nx]
                    office[ny][nx] = 0
                    x = nx
                    y = ny
            elif direction == 3:
                nx = x + dx[0]  # 0일 때 왼쪽으로, 1일 때 오른쪽, 2일 때 아래로 한 칸, 3일 때 위로 한 칸
                ny = y + dy[0]
                print(nx,ny,"nx","ny",office[ny][nx])
                if nx >= n or ny >= m or nx < 0 or ny < 0:  # 좌표 범위를 넘어가면 무시때림
                    continue
                if office[ny][nx] == -1:  # -1로 갈 때 막힘
                    continue
                else:
                    sum_1 += office[ny][nx]
                    office[ny][nx] = 0
                    x = nx
                    y = ny
                    print(x,y,"x","y")
    print(sum_1,"sum_1")
    return sum_1
office = [[5,-1,4], [6,3,-1],[2,-1,1]]  # map
table = []
r = 1 #좌표
c = 0
move = ["go","go","right","go","right","go","left","go"]
# 보드
# 5  -1  4
# 6  3  -1
# 2  -1  1
# 자원을 부수는 데 드는 비용
solution(office, r, c,move)